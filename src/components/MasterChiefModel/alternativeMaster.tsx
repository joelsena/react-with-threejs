/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: arorahillsservices.sean (https://sketchfab.com/arorahillsservices.sean)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/master-cheif-24bae4cb5ccc4ee58d519da42e435770
title: Master Cheif
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { AnimationClip, Mesh } from 'three'

type GLTFResult = GLTF & {
    nodes: {
        Object_6: THREE.SkinnedMesh
        Object_8: THREE.SkinnedMesh
        Object_9: THREE.SkinnedMesh
        _rootJoint: THREE.Bone
    }
    materials: {
        ['Helmet_78f817d5-faef-42d8-8f3b-0f1638ea63bdmat']: THREE.MeshStandardMaterial
        ['Body_2a46a897-a6bd-40f0-a95f-3a6ad1568f0cmat']: THREE.MeshStandardMaterial
        ['Visor_be822595-d4d2-4cac-a225-16b043c09f7dmat']: THREE.MeshStandardMaterial
    }
}

type ActionName = 'mixamo.com'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function AlternativeMaster({
    ...props
}: JSX.IntrinsicElements['group']) {
    const group = useRef<THREE.Group>()
    const { nodes, materials, animations, scene } = useGLTF(
        '/models/masterChiefModel.gltf'
    ) as GLTFResult
    const { actions } = useAnimations<AnimationClip>(animations, group)

    useEffect(() => {
        // gltf.scene.scale.set(0.022, 0.022, 0.022)
        // scene.scale.set(0.005, 0.005, 0.005)
        scene.position.set(0, -0.035, 0)
        scene.traverse(obj => {
            if (obj instanceof Mesh) {
                obj.castShadow = true
                obj.receiveShadow = true
                obj.material.envMapIntensity = 20
            }
        })

        actions['mixamo.com'].play()
    }, [scene, actions])

    return <primitive object={scene} dispose={null} {...props} />
}

useGLTF.preload('/models/masterChiefModel.gltf')
